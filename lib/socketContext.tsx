'use client';

import { createContext, useContext, useEffect, useState } from 'react';
import { useSession } from 'next-auth/react';
import io, { Socket } from 'socket.io-client';

interface OnlineUser {
  id: string;
  username: string;
  image: string | null;
  city: string | null;
  socketId: string;
  followersCount: number;
  connectedAt?: string;
}

interface SocketContextType {
  onlineUsers: OnlineUser[];
  error: string | null;
  socket: Socket | null;
  isConnected: boolean;
  notifications: any[];
  addNotification: (notification: any) => void;
}

const SocketContext = createContext<SocketContextType>({
  onlineUsers: [],
  error: null,
  socket: null,
  isConnected: false,
  notifications: [],
  addNotification: () => {},
});

// Fun√ß√£o para detectar ambiente
const detectEnvironment = () => {
  if (typeof window === 'undefined') {
    return false; // Server-side, assume produ√ß√£o
  }

  // Verificar se h√° uma configura√ß√£o for√ßada no localStorage
  const forceLocal = localStorage.getItem('force-socket-local');
  if (forceLocal === 'true') {
    console.log('üîß For√ßando conex√£o local via localStorage');
    return true;
  }

  const hostname = window.location.hostname;
  const port = window.location.port;
  const href = window.location.href;

  console.log('üîç Debug - Detec√ß√£o de ambiente:');
  console.log('  Hostname:', hostname);
  console.log('  Port:', port);
  console.log('  URL completa:', href);

  // Verificar vari√°veis de ambiente do Next.js
  const nextEnv = process.env.NODE_ENV;
  console.log('  NODE_ENV:', nextEnv);

  // Verificar se √© desenvolvimento baseado em m√∫ltiplos crit√©rios
  const isDevelopment = 
    // Por hostname
    hostname === 'localhost' ||
    hostname === '127.0.0.1' ||
    hostname === '192.168.3.16' ||
    hostname.includes('192.168.') ||
    hostname.includes('10.0.') ||
    hostname.includes('172.') ||
    // Por porta
    port === '3000' ||
    // Por URL
    href.includes('localhost') ||
    href.includes('192.168.') ||
    href.includes('127.0.0.1') ||
    // Por vari√°vel de ambiente
    nextEnv === 'development';

  console.log('üîç Ambiente detectado:', isDevelopment ? 'DESENVOLVIMENTO' : 'PRODU√á√ÉO');
  
  return isDevelopment;
};

export function SocketProvider({ children }: { children: React.ReactNode }) {
  const { data: session, status } = useSession();
  const [onlineUsers, setOnlineUsers] = useState<OnlineUser[]>([]);
  const [socket, setSocket] = useState<Socket | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [notifications, setNotifications] = useState<any[]>([]);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const addNotification = (notification: any) => {
    setNotifications(prev => [notification, ...prev.slice(0, 9)]); // Manter apenas as 10 √∫ltimas
  };

  useEffect(() => {
    // Detectar ambiente
    const isDevelopment = detectEnvironment();

    const socketUrl = isDevelopment 
      ? 'http://192.168.3.16:4000'
      : 'https://socket.confissoesdecorno.com:4000';

    console.log('üîå Conectando ao socket:', socketUrl);

    // Inicializar conex√£o com o socket
    const socketIo = io(socketUrl, {
      transports: ['websocket', 'polling'],
      withCredentials: true,
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
      timeout: 20000,
    });

    setSocket(socketIo);

    // Eventos de conex√£o
    socketIo.on('connect', () => {
      console.log('‚úÖ Conectado ao servidor socket');
      setIsConnected(true);
      setIsAuthenticated(false); // Reset autentica√ß√£o ao reconectar
      setError(null); // Limpa qualquer erro antigo ao conectar
    });

    socketIo.on('disconnect', () => {
      console.log('üîå Desconectado do servidor socket');
      setIsConnected(false);
      // S√≥ mostra erro se n√£o estiver logado
      if (!session?.user?.id) {
        setError('Voc√™ precisa estar logado para se conectar ao WebSocket.');
      } else {
        setError(null);
      }
    });

    // Escutar atualiza√ß√µes de usu√°rios conectados
    socketIo.on('update_connected_users', (users: OnlineUser[]) => {
      console.log('üìä Usu√°rios online atualizados:', users.length);
      console.log('üìã Lista de usu√°rios recebida:', users);
      console.log('üîç Estrutura dos dados recebidos:', users.map(u => ({
        id: u.id,
        username: u.username,
        idType: typeof u.id,
        idLength: u.id?.length,
        hasImage: !!u.image,
        hasCity: !!u.city
      })));
      setOnlineUsers(users);
    });

    // Escutar notifica√ß√µes em tempo real
    socketIo.on('notification', (notification: any) => {
      console.log('üîî Notifica√ß√£o recebida via socket:', notification);
      console.log('üîî Tipo da notifica√ß√£o:', notification.type);
      console.log('üîî Dados da notifica√ß√£o:', notification);
      addNotification(notification);
      console.log('‚úÖ Notifica√ß√£o adicionada ao contexto');
    });

    // Escutar confirma√ß√£o de autentica√ß√£o
    socketIo.on('authenticated', (data: { success: boolean; userId: string }) => {
      console.log('üîê Confirma√ß√£o de autentica√ß√£o recebida:', data);
      if (data.success) {
        setIsAuthenticated(true);
        console.log('‚úÖ Usu√°rio autenticado com sucesso:', data.userId);
      }
    });

    // Lidar com erros
    socketIo.on('error', (data: { message: string }) => {
      console.error('‚ùå Erro do socket:', data.message);
      setError(data.message);
    });

    // Lidar com reconex√£o
    socketIo.on('reconnect', () => {
      console.log('üîÑ Reconectado ao servidor socket');
      setIsConnected(true);
      setIsAuthenticated(false); // Reset autentica√ß√£o ao reconectar
      setError(null);
      
      // Reautenticar ap√≥s reconex√£o
      if (session?.user?.id) {
        console.log('üîê Reautenticando usu√°rio:', session.user.id);
        socketIo.emit('authenticate', { userId: session.user.id });
      }
    });

    // Lidar com falha de reconex√£o
    socketIo.on('reconnect_error', (error) => {
      console.error('‚ùå Erro na reconex√£o:', error);
      setError('Falha na reconex√£o com o servidor. Tentando novamente...');
    });

    // Lidar com erro de conex√£o
    socketIo.on('connect_error', (error) => {
      console.error('‚ùå Erro de conex√£o:', error);
      console.error('‚ùå Detalhes do erro:', {
        message: error.message,
        name: error.name,
        stack: error.stack
      });
      setError('Erro ao conectar com o servidor de tempo real.');
      setIsConnected(false);
    });

    // Adicionar listener para tentativas de reconex√£o
    socketIo.on('reconnect_attempt', (attemptNumber) => {
      console.log(`üîÑ Tentativa de reconex√£o #${attemptNumber}`);
    });

    // Adicionar listener para quando a reconex√£o falha
    socketIo.on('reconnect_failed', () => {
      console.error('‚ùå Todas as tentativas de reconex√£o falharam');
      setError('Falha na conex√£o com o servidor de tempo real ap√≥s m√∫ltiplas tentativas.');
    });

    // Limpar ao desmontar o componente
    return () => {
      console.log('üîå Desconectando socket');
      socketIo.disconnect();
      setSocket(null);
      setIsConnected(false);
    };
  }, []); // Executa apenas uma vez ao montar o componente

  // Autenticar quando a sess√£o estiver dispon√≠vel
  useEffect(() => {
    console.log('üîç Verificando autentica√ß√£o:', {
      status,
      hasSocket: !!socket,
      isConnected,
      hasSession: !!session,
      userId: session?.user?.id
    });

    if (status === 'loading' || !socket || !isConnected) {
      console.log('‚è≥ Aguardando condi√ß√µes para autentica√ß√£o...');
      return;
    }

    if (status === 'unauthenticated') {
      setError('Voc√™ precisa estar logado para se conectar ao WebSocket.');
      return;
    }

    const userId = session?.user?.id;
    if (userId && !isAuthenticated) {
      console.log('üîê Autenticando usu√°rio:', userId);
      console.log('üîê Dados da sess√£o:', {
        id: session.user.id,
        username: session.user.username,
        email: session.user.email
      });
      console.log('üîê Enviando evento authenticate...');
      socket.emit('authenticate', { userId });
      console.log('üîê Evento authenticate enviado');
      setIsAuthenticated(true);
    } else if (userId && isAuthenticated) {
      console.log('üîê Usu√°rio j√° autenticado:', userId);
    } else {
      console.log('‚ùå N√£o foi poss√≠vel obter ID do usu√°rio da sess√£o');
      console.log('üîç Status da sess√£o:', status);
      console.log('üîç Dados da sess√£o:', session);
      setError('Erro ao obter ID do usu√°rio.');
    }
  }, [session?.user?.id, status, socket, isConnected, isAuthenticated]); // Mudan√ßa: usar session?.user?.id em vez de session

  // Enviar pings peri√≥dicos para manter o usu√°rio online
  useEffect(() => {
    if (!session?.user?.id || !isConnected) return;

    const pingInterval = setInterval(async () => {
      try {
        await fetch('/api/users/ping', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        });
      } catch (error) {
        console.error('Erro ao enviar ping:', error);
      }
    }, 30000); // Ping a cada 30 segundos

    return () => clearInterval(pingInterval);
  }, [session?.user?.id, isConnected]);

  return (
    <SocketContext.Provider value={{ onlineUsers, error, socket, isConnected, notifications, addNotification }}>
      {children}
    </SocketContext.Provider>
  );
}

export function useSocket() {
  return useContext(SocketContext);
}